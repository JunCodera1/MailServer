#!/usr/bin/env python3
"""
UDP Mail Server Advanced GUI Client
Giao di·ªán ƒë·ªì h·ªça n√¢ng cao cho Mail Server
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, font, filedialog
from mail_client import MailClient
import os
import threading
from datetime import datetime
import json

class AdvancedMailGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("ÔøΩÔøΩ UDP Mail Server - Advanced Client")
        self.root.geometry("1200x800")
        self.root.configure(bg='#2c3e50')
        
        # C·∫•u h√¨nh style
        self.setup_styles()
        
        # Bi·∫øn l∆∞u tr·ªØ
        self.current_user = tk.StringVar()
        self.email_list = []
        self.server_status = "disconnected"
        
        self.setup_ui()
        self.check_server_connection()
    
    def setup_styles(self):
        """Thi·∫øt l·∫≠p style cho giao di·ªán"""
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # C·∫•u h√¨nh m√†u s·∫Øc
        self.colors = {
            'primary': '#2c3e50',
            'secondary': '#34495e',
            'success': '#27ae60',
            'warning': '#f39c12',
            'danger': '#e74c3c',
            'info': '#3498db',
            'light': '#ecf0f1',
            'dark': '#2c3e50'
        }
        
        # C·∫•u h√¨nh font
        self.fonts = {
            'title': font.Font(family="Arial", size=18, weight="bold"),
            'heading': font.Font(family="Arial", size=12, weight="bold"),
            'normal': font.Font(family="Arial", size=10),
            'small': font.Font(family="Arial", size=9)
        }
    
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ch√≠nh"""
        # Header v·ªõi status
        self.setup_header()
        
        # Main content area
        main_container = tk.Frame(self.root, bg=self.colors['light'])
        main_container.pack(fill='both', expand=True, padx=10, pady=5)
        
        # Left sidebar
        self.setup_sidebar(main_container)
        
        # Right content area
        self.setup_content_area(main_container)
        
        # Status bar
        self.setup_status_bar()
    
    def setup_header(self):
        """Thi·∫øt l·∫≠p header"""
        header_frame = tk.Frame(self.root, bg=self.colors['primary'], height=100)
        header_frame.pack(fill='x')
        header_frame.pack_propagate(False)
        
        # Title
        title_label = tk.Label(header_frame, text="üöÄ UDP Mail Server", 
                              font=self.fonts['title'], fg='white', bg=self.colors['primary'])
        title_label.pack(pady=10)
        
        # Status indicator
        status_frame = tk.Frame(header_frame, bg=self.colors['primary'])
        status_frame.pack(pady=5)
        
        self.status_indicator = tk.Label(status_frame, text="‚óè", font=('Arial', 20), 
                                        fg='red', bg=self.colors['primary'])
        self.status_indicator.pack(side='left', padx=5)
        
        self.status_label = tk.Label(status_frame, text="Disconnected", 
                                    font=self.fonts['heading'], fg='white', bg=self.colors['primary'])
        self.status_label.pack(side='left', padx=5)
    
    def setup_sidebar(self, parent):
        """Thi·∫øt l·∫≠p sidebar b√™n tr√°i"""
        sidebar = tk.Frame(parent, bg=self.colors['secondary'], width=300)
        sidebar.pack(side='left', fill='y', padx=(0, 5))
        sidebar.pack_propagate(False)
        
        # User section
        self.setup_user_section(sidebar)
        
        # Quick actions
        self.setup_quick_actions(sidebar)
        
        # Email management
        self.setup_email_management(sidebar)
        
        # System tools
        self.setup_system_tools(sidebar)
    
    def setup_user_section(self, parent):
        """Thi·∫øt l·∫≠p ph·∫ßn th√¥ng tin ng∆∞·ªùi d√πng"""
        user_frame = tk.LabelFrame(parent, text="üë§ Th√¥ng tin ng∆∞·ªùi d√πng", 
                                  font=self.fonts['heading'], fg='white', bg=self.colors['secondary'])
        user_frame.pack(fill='x', padx=10, pady=10)
        
        tk.Label(user_frame, text="T√†i kho·∫£n:", font=self.fonts['normal'], 
                fg='white', bg=self.colors['secondary']).pack(anchor='w', padx=5, pady=2)
        
        self.user_entry = tk.Entry(user_frame, textvariable=self.current_user, 
                                  font=self.fonts['normal'], width=25)
        self.user_entry.pack(padx=5, pady=2)
        
        # Login button
        login_btn = tk.Button(user_frame, text="üîë ƒêƒÉng nh·∫≠p", 
                             command=self.login_user, font=self.fonts['normal'],
                             bg=self.colors['info'], fg='white', width=20)
        login_btn.pack(pady=5)
    
    def setup_quick_actions(self, parent):
        """Thi·∫øt l·∫≠p c√°c thao t√°c nhanh"""
        actions_frame = tk.LabelFrame(parent, text="‚ö° Thao t√°c nhanh", 
                                     font=self.fonts['heading'], fg='white', bg=self.colors['secondary'])
        actions_frame.pack(fill='x', padx=10, pady=10)
        
        # Create account
        create_btn = tk.Button(actions_frame, text="‚ûï T·∫°o t√†i kho·∫£n", 
                              command=self.create_account_dialog, font=self.fonts['normal'],
                              bg=self.colors['success'], fg='white', width=20)
        create_btn.pack(pady=2)
        
        # Send email
        send_btn = tk.Button(actions_frame, text="üì§ G·ª≠i email", 
                            command=self.send_email_dialog, font=self.fonts['normal'],
                            bg=self.colors['danger'], fg='white', width=20)
        send_btn.pack(pady=2)
        
        # Refresh
        refresh_btn = tk.Button(actions_frame, text="üîÑ L√†m m·ªõi", 
                               command=self.refresh_email_list, font=self.fonts['normal'],
                               bg=self.colors['warning'], fg='white', width=20)
        refresh_btn.pack(pady=2)
    
    def setup_email_management(self, parent):
        """Thi·∫øt l·∫≠p qu·∫£n l√Ω email"""
        email_frame = tk.LabelFrame(parent, text="üìß Qu·∫£n l√Ω email", 
                                   font=self.fonts['heading'], fg='white', bg=self.colors['secondary'])
        email_frame.pack(fill='x', padx=10, pady=10)
        
        # Email list controls
        list_btn = tk.Button(email_frame, text="üìã Xem danh s√°ch", 
                            command=self.show_email_list, font=self.fonts['normal'],
                            bg=self.colors['info'], fg='white', width=20)
        list_btn.pack(pady=2)
        
        # Read email
        read_btn = tk.Button(email_frame, text="ÔøΩÔøΩ ƒê·ªçc email", 
                            command=self.read_selected_email, font=self.fonts['normal'],
                            bg=self.colors['warning'], fg='white', width=20)
        read_btn.pack(pady=2)
        
        # Export emails
        export_btn = tk.Button(email_frame, text="üíæ Xu·∫•t email", 
                              command=self.export_emails, font=self.fonts['normal'],
                              bg=self.colors['success'], fg='white', width=20)
        export_btn.pack(pady=2)
    
    def setup_system_tools(self, parent):
        """Thi·∫øt l·∫≠p c√¥ng c·ª• h·ªá th·ªëng"""
        tools_frame = tk.LabelFrame(parent, text="üîß C√¥ng c·ª• h·ªá th·ªëng", 
                                   font=self.fonts['heading'], fg='white', bg=self.colors['secondary'])
        tools_frame.pack(fill='x', padx=10, pady=10)
        
        # All accounts
        accounts_btn = tk.Button(tools_frame, text="üë• T·∫•t c·∫£ t√†i kho·∫£n", 
                                command=self.show_all_accounts, font=self.fonts['normal'],
                                bg=self.colors['info'], fg='white', width=20)
        accounts_btn.pack(pady=2)
        
        # Statistics
        stats_btn = tk.Button(tools_frame, text="üìä Th·ªëng k√™", 
                             command=self.show_system_stats, font=self.fonts['normal'],
                             bg=self.colors['warning'], fg='white', width=20)
        stats_btn.pack(pady=2)
        
        # Demo
        demo_btn = tk.Button(tools_frame, text="üß™ Demo", 
                            command=self.run_demo, font=self.fonts['normal'],
                            bg=self.colors['success'], fg='white', width=20)
        demo_btn.pack(pady=2)
        
        # Settings
        settings_btn = tk.Button(tools_frame, text="‚öôÔ∏è C√†i ƒë·∫∑t", 
                                command=self.show_settings, font=self.fonts['normal'],
                                bg=self.colors['dark'], fg='white', width=20)
        settings_btn.pack(pady=2)
    
    def setup_content_area(self, parent):
        """Thi·∫øt l·∫≠p v√πng n·ªôi dung ch√≠nh"""
        content_frame = tk.Frame(parent, bg='white')
        content_frame.pack(side='right', fill='both', expand=True)
        
        # Notebook for tabs
        self.notebook = ttk.Notebook(content_frame)
        self.notebook.pack(fill='both', expand=True, padx=5, pady=5)
        
        # Email list tab
        self.setup_email_list_tab()
        
        # Email content tab
        self.setup_email_content_tab()
        
        # Statistics tab
        self.setup_statistics_tab()
    
    def setup_email_list_tab(self):
        """Thi·∫øt l·∫≠p tab danh s√°ch email"""
        email_tab = ttk.Frame(self.notebook)
        self.notebook.add(email_tab, text="üìß Danh s√°ch email")
        
        # Email list frame
        list_frame = tk.Frame(email_tab, bg='white')
        list_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Listbox with scrollbar
        list_container = tk.Frame(list_frame, bg='white')
        list_container.pack(fill='both', expand=True)
        
        self.email_listbox = tk.Listbox(list_container, font=self.fonts['normal'], 
                                       selectmode='single', height=20)
        scrollbar = tk.Scrollbar(list_container, orient='vertical', command=self.email_listbox.yview)
        self.email_listbox.configure(yscrollcommand=scrollbar.set)
        
        self.email_listbox.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
        # Bind events
        self.email_listbox.bind('<Double-1>', self.read_selected_email)
        self.email_listbox.bind('<Button-1>', self.on_email_select)
    
    def setup_email_content_tab(self):
        """Thi·∫øt l·∫≠p tab n·ªôi dung email"""
        content_tab = ttk.Frame(self.notebook)
        self.notebook.add(content_tab, text="üìÑ N·ªôi dung email")
        
        # Content frame
        content_frame = tk.Frame(content_tab, bg='white')
        content_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Email info frame
        info_frame = tk.Frame(content_frame, bg='#f8f9fa', relief='raised', bd=1)
        info_frame.pack(fill='x', pady=(0, 10))
        
        self.email_info_label = tk.Label(info_frame, text="Ch·ªçn email ƒë·ªÉ xem n·ªôi dung", 
                                        font=self.fonts['heading'], bg='#f8f9fa')
        self.email_info_label.pack(pady=10)
        
        # Email content
        self.email_content = scrolledtext.ScrolledText(content_frame, 
                                                      font=self.fonts['normal'], 
                                                      height=20, wrap='word')
        self.email_content.pack(fill='both', expand=True)
    
    def setup_statistics_tab(self):
        """Thi·∫øt l·∫≠p tab th·ªëng k√™"""
        stats_tab = ttk.Frame(self.notebook)
        self.notebook.add(stats_tab, text="üìä Th·ªëng k√™")
        
        # Stats content
        self.stats_content = scrolledtext.ScrolledText(stats_tab, 
                                                      font=self.fonts['normal'], 
                                                      height=20, wrap='word')
        self.stats_content.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Load initial stats
        self.load_statistics()
    
    def setup_status_bar(self):
        """Thi·∫øt l·∫≠p thanh tr·∫°ng th√°i"""
        status_frame = tk.Frame(self.root, bg=self.colors['dark'], height=30)
        status_frame.pack(fill='x', side='bottom')
        status_frame.pack_propagate(False)
        
        self.status_text = tk.Label(status_frame, text="S·∫µn s√†ng", 
                                   font=self.fonts['small'], fg='white', bg=self.colors['dark'])
        self.status_text.pack(side='left', padx=10, pady=5)
        
        # Time label
        self.time_label = tk.Label(status_frame, text="", 
                                  font=self.fonts['small'], fg='white', bg=self.colors['dark'])
        self.time_label.pack(side='right', padx=10, pady=5)
        
        # Update time
        self.update_time()
    
    def update_time(self):
        """C·∫≠p nh·∫≠t th·ªùi gian hi·ªán t·∫°i"""
        current_time = datetime.now().strftime("%H:%M:%S")
        self.time_label.config(text=current_time)
        self.root.after(1000, self.update_time)
    
    def check_server_connection(self):
        """Ki·ªÉm tra k·∫øt n·ªëi server"""
        def check_connection():
            try:
                client = MailClient()
                # Th·ª≠ g·ª≠i m·ªôt request test
                result = client.create_account("test_connection_gui")
                client.close()
                
                self.server_status = "connected"
                self.status_indicator.config(fg='green')
                self.status_label.config(text="Connected")
                self.update_status("‚úÖ K·∫øt n·ªëi server th√†nh c√¥ng")
            except Exception as e:
                self.server_status = "disconnected"
                self.status_indicator.config(fg='red')
                self.status_label.config(text="Disconnected")
                self.update_status(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi server: {str(e)}")
        
        # Ch·∫°y ki·ªÉm tra trong thread ri√™ng
        threading.Thread(target=check_connection, daemon=True).start()
    
    def update_status(self, message):
        """C·∫≠p nh·∫≠t thanh tr·∫°ng th√°i"""
        self.status_text.config(text=message)
    
    def show_status(self, message, type="info"):
        """Hi·ªÉn th·ªã th√¥ng b√°o tr·∫°ng th√°i"""
        if type == "error":
            messagebox.showerror("L·ªói", message)
        elif type == "warning":
            messagebox.showwarning("C·∫£nh b√°o", message)
        else:
            messagebox.showinfo("Th√¥ng b√°o", message)
    
    def create_account_dialog(self):
        """Dialog t·∫°o t√†i kho·∫£n"""
        dialog = tk.Toplevel(self.root)
        dialog.title("T·∫°o t√†i kho·∫£n m·ªõi")
        dialog.geometry("500x300")
        dialog.configure(bg=self.colors['light'])
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Center dialog
        dialog.geometry("+%d+%d" % (self.root.winfo_rootx() + 100, self.root.winfo_rooty() + 100))
        
        # Header
        header_frame = tk.Frame(dialog, bg=self.colors['primary'], height=60)
        header_frame.pack(fill='x')
        header_frame.pack_propagate(False)
        
        tk.Label(header_frame, text="‚ûï T·∫°o t√†i kho·∫£n m·ªõi", 
                font=self.fonts['title'], fg='white', bg=self.colors['primary']).pack(pady=15)
        
        # Form
        form_frame = tk.Frame(dialog, bg=self.colors['light'])
        form_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        tk.Label(form_frame, text="T√™n t√†i kho·∫£n:", font=self.fonts['heading'], 
                bg=self.colors['light']).pack(anchor='w', pady=(10, 5))
        
        username_entry = tk.Entry(form_frame, font=self.fonts['normal'], width=40)
        username_entry.pack(fill='x', pady=(0, 10))
        username_entry.focus()
        
        # Rules
        rules_text = """Quy t·∫Øc ƒë·∫∑t t√™n t√†i kho·∫£n:
‚Ä¢ Ch·ªâ s·ª≠ d·ª•ng ch·ªØ c√°i, s·ªë v√† d·∫•u g·∫°ch d∆∞·ªõi
‚Ä¢ Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng
‚Ä¢ T√™n t√†i kho·∫£n ph·∫£i duy nh·∫•t"""
        
        rules_label = tk.Label(form_frame, text=rules_text, font=self.fonts['small'], 
                              fg='gray', bg=self.colors['light'], justify='left')
        rules_label.pack(anchor='w', pady=(0, 20))
        
        def create_account():
            username = username_entry.get().strip()
            if not username:
                messagebox.showerror("L·ªói", "T√™n t√†i kho·∫£n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
                return
            
            try:
                client = MailClient()
                result = client.create_account(username)
                client.close()
                
                if result['status'] == 'success':
                    self.show_status(f"‚úÖ {result['message']}", "info")
                    dialog.destroy()
                else:
                    self.show_status(f"‚ùå {result['message']}", "error")
            except Exception as e:
                self.show_status(f"‚ùå L·ªói: {str(e)}", "error")
        
        # Buttons
        button_frame = tk.Frame(form_frame, bg=self.colors['light'])
        button_frame.pack(fill='x', pady=(20, 0))
        
        tk.Button(button_frame, text="T·∫°o t√†i kho·∫£n", command=create_account,
                 font=self.fonts['normal'], bg=self.colors['success'], fg='white', 
                 width=15).pack(side='left', padx=(0, 10))
        
        tk.Button(button_frame, text="H·ªßy", command=dialog.destroy,
                 font=self.fonts['normal'], bg=self.colors['dark'], fg='white', 
                 width=15).pack(side='left')
        
        # Bind Enter key
        dialog.bind('<Return>', lambda e: create_account())
    
    def login_user(self):
        """ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng"""
        username = self.current_user.get().strip()
        if not username:
            self.show_status("‚ùå Vui l√≤ng nh·∫≠p t√™n t√†i kho·∫£n!", "error")
            return
        
        def login_thread():
            try:
                self.update_status("ƒêang ƒëƒÉng nh·∫≠p...")
                client = MailClient()
                result = client.login(username)
                client.close()
                
                if result['status'] == 'success':
                    self.email_list = result['files']
                    self.update_email_list()
                    self.show_status(f"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! T√¨m th·∫•y {len(self.email_list)} email(s)", "info")
                    self.update_status(f"ƒê√£ ƒëƒÉng nh·∫≠p: {username}")
                else:
                    self.show_status(f"‚ùå {result['message']}", "error")
                    self.update_status("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i")
            except Exception as e:
                self.show_status(f"‚ùå L·ªói: {str(e)}", "error")
                self.update_status("L·ªói k·∫øt n·ªëi")
        
        threading.Thread(target=login_thread, daemon=True).start()
    
    def update_email_list(self):
        """C·∫≠p nh·∫≠t danh s√°ch email"""
        self.email_listbox.delete(0, tk.END)
        for i, filename in enumerate(self.email_list, 1):
            # Th√™m icon d·ª±a tr√™n lo·∫°i file
            if filename == "new_email.txt":
                icon = "üìß"
            elif filename.startswith("email_"):
                icon = "‚úâÔ∏è"
            else:
                icon = "üìÑ"
            
            self.email_listbox.insert(tk.END, f"{icon} {i:2d}. {filename}")
    
    def on_email_select(self, event):
        """X·ª≠ l√Ω khi ch·ªçn email"""
        selection = self.email_listbox.curselection()
        if selection:
            filename = self.email_list[selection[0]]
            self.email_info_label.config(text=f"üìÑ {filename}")
    
    def read_selected_email(self, event=None):
        """ƒê·ªçc email ƒë∆∞·ª£c ch·ªçn"""
        selection = self.email_listbox.curselection()
        if not selection:
            self.show_status("‚ùå Vui l√≤ng ch·ªçn email!", "error")
            return
        
        username = self.current_user.get().strip()
        if not username:
            self.show_status("‚ùå Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc!", "error")
            return
        
        filename = self.email_list[selection[0]]
        
        def read_thread():
            try:
                self.update_status("ƒêang ƒë·ªçc email...")
                client = MailClient()
                result = client.get_email(username, filename)
                client.close()
                
                if result['status'] == 'success':
                    self.email_content.delete(1.0, tk.END)
                    self.email_content.insert(1.0, result['content'])
                    self.notebook.select(1)  # Chuy·ªÉn sang tab n·ªôi dung
                    self.update_status(f"ƒê√£ ƒë·ªçc email: {filename}")
                else:
                    self.show_status(f"‚ùå {result['message']}", "error")
            except Exception as e:
                self.show_status(f"‚ùå L·ªói: {str(e)}", "error")
        
        threading.Thread(target=read_thread, daemon=True).start()
    
    def send_email_dialog(self):
        """Dialog g·ª≠i email"""
        sender = self.current_user.get().strip()
        if not sender:
            self.show_status("‚ùå Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc!", "error")
            return
        
        dialog = tk.Toplevel(self.root)
        dialog.title("G·ª≠i email")
        dialog.geometry("700x600")
        dialog.configure(bg=self.colors['light'])
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Center dialog
        dialog.geometry("+%d+%d" % (self.root.winfo_rootx() + 50, self.root.winfo_rooty() + 50))
        
        # Header
        header_frame = tk.Frame(dialog, bg=self.colors['primary'], height=60)
        header_frame.pack(fill='x')
        header_frame.pack_propagate(False)
        
        tk.Label(header_frame, text="üì§ G·ª≠i email", 
                font=self.fonts['title'], fg='white', bg=self.colors['primary']).pack(pady=15)
        
        # Form
        form_frame = tk.Frame(dialog, bg=self.colors['light'])
        form_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Sender info
        sender_frame = tk.Frame(form_frame, bg=self.colors['light'])
        sender_frame.pack(fill='x', pady=(0, 10))
        
        tk.Label(sender_frame, text=f"Ng∆∞·ªùi g·ª≠i: {sender}", 
                font=self.fonts['heading'], bg=self.colors['light']).pack(anchor='w')
        
        # Recipient
        tk.Label(form_frame, text="Ng∆∞·ªùi nh·∫≠n:", font=self.fonts['heading'], 
                bg=self.colors['light']).pack(anchor='w', pady=(10, 5))
        recipient_entry = tk.Entry(form_frame, font=self.fonts['normal'], width=60)
        recipient_entry.pack(fill='x', pady=(0, 10))
        
        # Subject
        tk.Label(form_frame, text="Ti√™u ƒë·ªÅ:", font=self.fonts['heading'], 
                bg=self.colors['light']).pack(anchor='w', pady=(10, 5))
        subject_entry = tk.Entry(form_frame, font=self.fonts['normal'], width=60)
        subject_entry.pack(fill='x', pady=(0, 10))
        
        # Content
        tk.Label(form_frame, text="N·ªôi dung:", font=self.fonts['heading'], 
                bg=self.colors['light']).pack(anchor='w', pady=(10, 5))
        content_text = scrolledtext.ScrolledText(form_frame, font=self.fonts['normal'], 
                                                height=15, width=70)
        content_text.pack(fill='both', expand=True, pady=(0, 10))
        
        def send_email():
            recipient = recipient_entry.get().strip()
            subject = subject_entry.get().strip()
            content = content_text.get(1.0, tk.END).strip()
            
            if not recipient:
                messagebox.showerror("L·ªói", "Ng∆∞·ªùi nh·∫≠n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
                return
            
            def send_thread():
                try:
                    self.update_status("ƒêang g·ª≠i email...")
                    client = MailClient()
                    result = client.send_email(sender, recipient, subject, content)
                    client.close()
                    
                    if result['status'] == 'success':
                        self.show_status(f"‚úÖ {result['message']}", "info")
                        dialog.destroy()
                        self.update_status("Email ƒë√£ ƒë∆∞·ª£c g·ª≠i")
                    else:
                        self.show_status(f"‚ùå {result['message']}", "error")
                except Exception as e:
                    self.show_status(f"‚ùå L·ªói: {str(e)}", "error")
            
            threading.Thread(target=send_thread, daemon=True).start()
        
        # Buttons
        button_frame = tk.Frame(form_frame, bg=self.colors['light'])
        button_frame.pack(fill='x', pady=(10, 0))
        
        tk.Button(button_frame, text="G·ª≠i email", command=send_email,
                 font=self.fonts['normal'], bg=self.colors['danger'], fg='white', 
                 width=15).pack(side='left', padx=(0, 10))
        
        tk.Button(button_frame, text="H·ªßy", command=dialog.destroy,
                 font=self.fonts['normal'], bg=self.colors['dark'], fg='white', 
                 width=15).pack(side='left')
    
    def show_email_list(self):
        """Hi·ªÉn th·ªã danh s√°ch email"""
        self.notebook.select(0)  # Chuy·ªÉn sang tab danh s√°ch email
    
    def show_all_accounts(self):
        """Hi·ªÉn th·ªã t·∫•t c·∫£ t√†i kho·∫£n"""
        def load_accounts():
            try:
                accounts_dir = "accounts"
                if not os.path.exists(accounts_dir):
                    self.show_status("‚ùå Th∆∞ m·ª•c accounts kh√¥ng t·ªìn t·∫°i!", "error")
                    return
                
                accounts = [d for d in os.listdir(accounts_dir) 
                           if os.path.isdir(os.path.join(accounts_dir, d))]
                
                if accounts:
                    message = f"üìä T√¨m th·∫•y {len(accounts)} t√†i kho·∫£n:\n\n"
                    for i, account in enumerate(accounts, 1):
                        email_count = len([f for f in os.listdir(os.path.join(accounts_dir, account)) 
                                         if os.path.isfile(os.path.join(accounts_dir, account, f))])
                        message += f"{i:2d}. {account} ({email_count} emails)\n"
                    
                    self.show_accounts_window(accounts, message)
                else:
                    self.show_status("üì≠ Ch∆∞a c√≥ t√†i kho·∫£n n√†o!", "info")
            except Exception as e:
                self.show_status(f"‚ùå L·ªói: {str(e)}", "error")
        
        threading.Thread(target=load_accounts, daemon=True).start()
    
    def show_accounts_window(self, accounts, message):
        """Hi·ªÉn th·ªã c·ª≠a s·ªï danh s√°ch t√†i kho·∫£n"""
        window = tk.Toplevel(self.root)
        window.title("Danh s√°ch t√†i kho·∫£n")
        window.geometry("600x500")
        window.configure(bg=self.colors['light'])
        
        # Header
        header_frame = tk.Frame(window, bg=self.colors['primary'], height=60)
        header_frame.pack(fill='x')
        header_frame.pack_propagate(False)
        
        tk.Label(header_frame, text="üë• Danh s√°ch t√†i kho·∫£n", 
                font=self.fonts['title'], fg='white', bg=self.colors['primary']).pack(pady=15)
        
        # Content
        text_widget = scrolledtext.ScrolledText(window, font=self.fonts['normal'], wrap='word')
        text_widget.pack(fill='both', expand=True, padx=20, pady=20)
        text_widget.insert(1.0, message)
        text_widget.config(state='disabled')
        
        # Close button
        tk.Button(window, text="ƒê√≥ng", command=window.destroy,
                 font=self.fonts['normal'], bg=self.colors['dark'], fg='white', 
                 width=15).pack(pady=10)
    
    def refresh_email_list(self):
        """L√†m m·ªõi danh s√°ch email"""
        username = self.current_user.get().strip()
        if not username:
            self.show_status("‚ùå Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc!", "error")
            return
        
        self.login_user()
    
    def show_system_stats(self):
        """Hi·ªÉn th·ªã th·ªëng k√™ h·ªá th·ªëng"""
        def load_stats():
            try:
                accounts_dir = "accounts"
                if not os.path.exists(accounts_dir):
                    self.show_status("‚ùå Th∆∞ m·ª•c accounts kh√¥ng t·ªìn t·∫°i!", "error")
                    return
                
                accounts = [d for d in os.listdir(accounts_dir) 
                           if os.path.isdir(os.path.join(accounts_dir, d))]
                
                total_emails = 0
                for account in accounts:
                    account_dir = os.path.join(accounts_dir, account)
                    emails = [f for f in os.listdir(account_dir) 
                             if os.path.isfile(os.path.join(account_dir, f))]
                    total_emails += len(emails)
                
                message = f"""üìä TH·ªêNG K√ä H·ªÜ TH·ªêNG

üë• T·ªïng s·ªë t√†i kho·∫£n: {len(accounts)}
ÔøΩÔøΩ T·ªïng s·ªë email: {total_emails}
üìÅ Th∆∞ m·ª•c l∆∞u tr·ªØ: {os.path.abspath(accounts_dir)}
üïí Th·ªùi gian hi·ªán t·∫°i: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üìã Chi ti·∫øt t√†i kho·∫£n:"""
                
                for account in accounts:
                    account_dir = os.path.join(accounts_dir, account)
                    emails = [f for f in os.listdir(account_dir) 
                             if os.path.isfile(os.path.join(account_dir, f))]
                    message += f"\n  ‚Ä¢ {account}: {len(emails)} emails"
                
                self.stats_content.delete(1.0, tk.END)
                self.stats_content.insert(1.0, message)
                self.notebook.select(2)  # Chuy·ªÉn sang tab th·ªëng k√™
            except Exception as e:
                self.show_status(f"‚ùå L·ªói: {str(e)}", "error")
        
        threading.Thread(target=load_stats, daemon=True).start()
    
    def load_statistics(self):
        """T·∫£i th·ªëng k√™ ban ƒë·∫ßu"""
        self.stats_content.insert(1.0, "üìä Th·ªëng k√™ h·ªá th·ªëng s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y...\n\nNh·∫•n n√∫t 'Th·ªëng k√™' ƒë·ªÉ c·∫≠p nh·∫≠t.")
    
    def export_emails(self):
        """Xu·∫•t email ra file"""
        username = self.current_user.get().strip()
        if not username:
            self.show_status("‚ùå Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc!", "error")
            return
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
            title="L∆∞u email"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(f"Email c·ªßa {username}\n")
                    f.write("=" * 50 + "\n\n")
                    
                    for email_file in self.email_list:
                        f.write(f"File: {email_file}\n")
                        f.write("-" * 30 + "\n")
                        
                        client = MailClient()
                        result = client.get_email(username, email_file)
                        client.close()
                        
                        if result['status'] == 'success':
                            f.write(result['content'])
                        else:
                            f.write(f"L·ªói: {result['message']}")
                        
                        f.write("\n\n" + "=" * 50 + "\n\n")
                
                self.show_status(f"‚úÖ ƒê√£ xu·∫•t email ra {filename}", "info")
            except Exception as e:
                self.show_status(f"‚ùå L·ªói xu·∫•t file: {str(e)}", "error")
    
    def show_settings(self):
        """Hi·ªÉn th·ªã c√†i ƒë·∫∑t"""
        settings_window = tk.Toplevel(self.root)
        settings_window.title("C√†i ƒë·∫∑t")
        settings_window.geometry("400x300")
        settings_window.configure(bg=self.colors['light'])
        
        # Header
        header_frame = tk.Frame(settings_window, bg=self.colors['primary'], height=60)
        header_frame.pack(fill='x')
        header_frame.pack_propagate(False)
        
        tk.Label(header_frame, text="‚öôÔ∏è C√†i ƒë·∫∑t", 
                font=self.fonts['title'], fg='white', bg=self.colors['primary']).pack(pady=15)
        
        # Settings content
        content_frame = tk.Frame(settings_window, bg=self.colors['light'])
        content_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        tk.Label(content_frame, text="C√†i ƒë·∫∑t h·ªá th·ªëng:", 
                font=self.fonts['heading'], bg=self.colors['light']).pack(anchor='w', pady=(0, 10))
        
        # Server settings
        server_frame = tk.LabelFrame(content_frame, text="Server", 
                                    font=self.fonts['normal'], bg=self.colors['light'])
        server_frame.pack(fill='x', pady=(0, 10))
        
        tk.Label(server_frame, text="Host: localhost", 
                font=self.fonts['normal'], bg=self.colors['light']).pack(anchor='w', padx=10, pady=5)
        tk.Label(server_frame, text="Port: 12345", 
                font=self.fonts['normal'], bg=self.colors['light']).pack(anchor='w', padx=10, pady=5)
        
        # About
        about_frame = tk.LabelFrame(content_frame, text="Th√¥ng tin", 
                                   font=self.fonts['normal'], bg=self.colors['light'])
        about_frame.pack(fill='x', pady=(0, 10))
        
        about_text = """UDP Mail Server GUI Client
Phi√™n b·∫£n: 2.0
T√°c gi·∫£: Jun ()
C√¥ng ngh·ªá: Python + Tkinter"""
        
        tk.Label(about_frame, text=about_text, 
                font=self.fonts['small'], bg=self.colors['light'], 
                justify='left').pack(anchor='w', padx=10, pady=5)
        
        # Close button
        tk.Button(content_frame, text="ƒê√≥ng", command=settings_window.destroy,
                 font=self.fonts['normal'], bg=self.colors['dark'], fg='white', 
                 width=15).pack(pady=20)
    
    def run_demo(self):
        """Ch·∫°y demo t·ª± ƒë·ªông"""
        def demo_thread():
            try:
                self.update_status("üß™ ƒêang ch·∫°y demo...")
                
                client = MailClient()
                
                # T·∫°o t√†i kho·∫£n demo
                client.create_account("demo_gui_advanced")
                
                # G·ª≠i email demo
                client.send_email("demo_gui_advanced", "demo_gui_advanced", "Email GUI Advanced Demo", 
                                "ƒê√¢y l√† email demo t·ª´ giao di·ªán GUI n√¢ng cao!\n\nT√≠nh nƒÉng:\n- Giao di·ªán ƒë·∫πp m·∫Øt\n- X·ª≠ l√Ω ƒëa lu·ªìng\n- Th·ªëng k√™ chi ti·∫øt\n- Xu·∫•t email")
                
                # ƒêƒÉng nh·∫≠p v√† xem email
                result = client.login("demo_gui_advanced")
                client.close()
                
                if result['status'] == 'success':
                    self.show_status(f"‚úÖ Demo ho√†n th√†nh! Demo user c√≥ {len(result['files'])} email(s)", "info")
                    self.update_status("Demo ho√†n th√†nh")
                else:
                    self.show_status("‚ùå Demo th·∫•t b·∫°i!", "error")
            except Exception as e:
                self.show_status(f"‚ùå L·ªói demo: {str(e)}", "error")
        
        threading.Thread(target=demo_thread, daemon=True).start()

def main():
    root = tk.Tk()
    app = AdvancedMailGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
